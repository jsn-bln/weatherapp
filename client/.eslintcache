[{"C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\index.js":"1","C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\App.js":"2","C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\components\\CurrentWeather\\CurrentWeather.js":"3","C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\components\\WeeklyWeather\\WeeklyWeather.js":"4","C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\context\\DataContext.js":"5"},{"size":252,"mtime":1612442736142,"results":"6","hashOfConfig":"7"},{"size":3905,"mtime":1612754502209,"results":"8","hashOfConfig":"7"},{"size":1842,"mtime":1612507991651,"results":"9","hashOfConfig":"7"},{"size":8775,"mtime":1612759553098,"results":"10","hashOfConfig":"7"},{"size":77,"mtime":1612442736153,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1yvmiub",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\index.js",[],["25","26"],"C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\App.js",["27"],"import './App.css'\nimport axios from 'axios'\nimport {useState, useContext} from 'react'\nimport sunny from './svg/sunny-day.svg'\nimport hot from './svg/hot-day.svg'\nimport cold from './svg/cold-day.svg'\nimport cloudy from './svg/cloudy-day.svg'\nimport clearNight from './svg/sunny-night.svg'\nimport cloudyNight from './svg/cloudy-night.svg'\nimport hotNight from './svg/hot-night.svg'\nimport coldNight from './svg/cold-night.svg'\nimport CurrentWeather from './components/CurrentWeather/CurrentWeather'\nimport WeeklyWeather from './components/WeeklyWeather/WeeklyWeather'\nimport DataContext from './context/DataContext'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport defaultBackground from './imgs/main-bg.jpg'\n\nconst App = () => {\n  const [city, setCity] = useState('')\n  const [data, setData] = useState({})\n  const [bg, setBg] = useState(defaultBackground)\n  const [weatherData, setWeatherData] = useState({})\n  const [isLoading, setIsLoading] = useState(true)\n  const [time, setTime] = useState('')\n  const findCity = () => {\n      axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=9782b49f3b88030442b9fe6cff72fe64&units=metric`)\n      .then(res => {\n          setData(res.data)\n          const time = calcTime(res.data.timezone)\n          setTime(time)\n          setBackground(res.data.main.temp,time)\n          const lat = res.data.coord.lat\n          const lon = res.data.coord.lon\n          axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&appid=9782b49f3b88030442b9fe6cff72fe64&units=metric`)\n            .then(res => {\n              setWeatherData(res.data)\n              setIsLoading(false)\n            })\n            .catch(error => console.log(error))\n      })\n      .catch(err => console.log(err))\n  }\n\n  const setBackground = (temperature, time) => {\n    const temp = Math.round(temperature)\n    if(temp >= 32 && (time <= 17 && time >=5)){\n      setBg(hot)\n    }else if((temp >= 20 && temp <=31) && (time <= 17 && time >=5)){\n      setBg(sunny)\n    }\n    else if((temp >= 11 && temp <=19) && (time <= 17 && time >=5)){\n      setBg(cloudy)\n    }\n    else if(temp <= 10 && (time <= 17 && time >=5)){\n      setBg(cold)\n    }\n    else if(temp >= 32 && (time >= 18 || time <=4)){\n      setBg(hotNight)\n    }\n    else if((temp >= 20 && temp <=31) && (time >= 18 || time <=4)){\n      setBg(clearNight)\n    }\n    else if((temp >= 11 && temp <=19) && (time >= 18 || time <=4)){\n      setBg(cloudyNight)\n    }\n    else if(temp <= 10 && (time >= 18 || time <=4)){\n      setBg(coldNight)\n    }\n  }\n\n  const calcTime = (offset) =>{\n    var d = new Date();\n    var utc = d.getTime() + (d.getTimezoneOffset() * 60000);\n    const offsetResult = (offset / 60)/60\n    var nd = new Date(utc + (3600000*offsetResult));\n\n    return nd.getHours();\n  }\n\n  return (\n    <div className=\"App\" style={{backgroundImage: `url(${bg}`}}>\n      <div className=\"main-container\">\n        <h1 className=\"brand\">Weather Forecast</h1>\n        <div className=\"action-group\">\n          <input className=\"search-bar\" placeholder=\"Search City\" value={city}\n              onChange={e => setCity(e.target.value)} \n              onKeyDown={e=> e.key === 'Enter' ?  findCity() : null}/>\n          <button className=\"search-btn\" onClick={findCity}>Search</button>\n        </div>\n      </div>\n      {data.main !== undefined?\n      <div className=\"data-container\">\n            <div className=\"cards\">\n              <DataContext.Provider value={{weatherData, setWeatherData}}>\n              {isLoading?\n                <CircularProgress />\n                :\n                <>\n                <CurrentWeather  data={data}/>\n                <WeeklyWeather time={time}/>\n                </>\n\n              } \n              </DataContext.Provider>\n            </div>\n        </div>\n        :\n        <>\n        </>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\components\\CurrentWeather\\CurrentWeather.js",["28","29","30","31","32","33"],"import {Card, CardContent, CardHeader, Divider} from '@material-ui/core'\r\nimport React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport './CurrentWeather.css'\r\n\r\n\r\nconst CurrentWeather = (props) => {\r\n    const date = moment().format('LLLL')\r\n    const timezone = props.data.timezone\r\n    const weather = props.data.weather[0].main\r\n    const icon = props.data.weather[0].icon\r\n\r\n    const  calcDate = (offset) =>{\r\n        var d = new Date();\r\n        var utc = d.getTime() + (d.getTimezoneOffset() * 60000);\r\n        const offsetResult = (offset / 60)/60\r\n        var nd = new Date(utc + (3600000*offsetResult));\r\n        const datetime = moment((nd)).format(\"dddd, MMM  D YYYY h:mm a\")\r\n        return datetime\r\n      }\r\n    \r\n    return(\r\n        <Card className=\"card-container\">\r\n            <CardHeader title={props.data.name} subheader={calcDate(props.data.timezone)}/>\r\n            <CardContent className=\"sub-card-container\">\r\n                <h3 className='description'>Today your experiencing {props.data.weather[0].description}</h3>\r\n                <Divider className=\"divider\"/>\r\n                <div className=\"weather-day-info\">\r\n                    <div className=\"weather-data\">\r\n                        <div>Temperature: {Math.round(props.data.main.temp)}°C</div>\r\n                        <div>Feels like: {Math.round(props.data.main.feels_like)}°C</div>\r\n                        <div>Humidity: {Math.round(props.data.main.humidity)}%</div>\r\n                        <div>Wind Speed: {Math.round(props.data.wind.speed)} km/h</div>\r\n                    </div>\r\n                    <img className=\"icon\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/>\r\n                </div>\r\n                    \r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\nexport default CurrentWeather","C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\components\\WeeklyWeather\\WeeklyWeather.js",["34","35","36","37","38","39","40"],"C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\context\\DataContext.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":3,"column":19,"nodeType":"47","messageId":"48","endLine":3,"endColumn":29},{"ruleId":"45","severity":1,"message":"49","line":2,"column":17,"nodeType":"47","messageId":"48","endLine":2,"endColumn":25},{"ruleId":"45","severity":1,"message":"50","line":2,"column":27,"nodeType":"47","messageId":"48","endLine":2,"endColumn":36},{"ruleId":"45","severity":1,"message":"51","line":8,"column":11,"nodeType":"47","messageId":"48","endLine":8,"endColumn":15},{"ruleId":"45","severity":1,"message":"52","line":9,"column":11,"nodeType":"47","messageId":"48","endLine":9,"endColumn":19},{"ruleId":"45","severity":1,"message":"53","line":10,"column":11,"nodeType":"47","messageId":"48","endLine":10,"endColumn":18},{"ruleId":"54","severity":1,"message":"55","line":35,"column":21,"nodeType":"56","endLine":35,"endColumn":100},{"ruleId":"45","severity":1,"message":"57","line":3,"column":9,"nodeType":"47","messageId":"48","endLine":3,"endColumn":13},{"ruleId":"45","severity":1,"message":"58","line":21,"column":11,"nodeType":"47","messageId":"48","endLine":21,"endColumn":27},{"ruleId":"45","severity":1,"message":"59","line":22,"column":11,"nodeType":"47","messageId":"48","endLine":22,"endColumn":28},{"ruleId":"45","severity":1,"message":"60","line":23,"column":11,"nodeType":"47","messageId":"48","endLine":23,"endColumn":30},{"ruleId":"45","severity":1,"message":"61","line":24,"column":11,"nodeType":"47","messageId":"48","endLine":24,"endColumn":29},{"ruleId":"54","severity":1,"message":"55","line":189,"column":33,"nodeType":"56","endLine":191,"endColumn":35},{"ruleId":"54","severity":1,"message":"55","line":210,"column":37,"nodeType":"56","endLine":212,"endColumn":39},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'date' is assigned a value but never used.","'timezone' is assigned a value but never used.","'weather' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Link' is defined but never used.","'hourly_data_temp' is assigned a value but never used.","'hourly_data_humid' is assigned a value but never used.","'hourly_data_weather' is assigned a value but never used.","'daily_data_weather' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]