[{"C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\index.js":"1","C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\App.js":"2","C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\components\\CurrentWeather\\CurrentWeather.js":"3","C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\components\\WeeklyWeather\\WeeklyWeather.js":"4","C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\context\\DataContext.js":"5"},{"size":252,"mtime":1612442736142,"results":"6","hashOfConfig":"7"},{"size":3905,"mtime":1612754502209,"results":"8","hashOfConfig":"7"},{"size":1842,"mtime":1612507991651,"results":"9","hashOfConfig":"7"},{"size":8775,"mtime":1612759553098,"results":"10","hashOfConfig":"7"},{"size":77,"mtime":1612442736153,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1yvmiub",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\index.js",[],["27","28"],"C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\App.js",["29"],"import './App.css'\nimport axios from 'axios'\nimport {useState, useContext} from 'react'\nimport sunny from './svg/sunny-day.svg'\nimport hot from './svg/hot-day.svg'\nimport cold from './svg/cold-day.svg'\nimport cloudy from './svg/cloudy-day.svg'\nimport clearNight from './svg/sunny-night.svg'\nimport cloudyNight from './svg/cloudy-night.svg'\nimport hotNight from './svg/hot-night.svg'\nimport coldNight from './svg/cold-night.svg'\nimport CurrentWeather from './components/CurrentWeather/CurrentWeather'\nimport WeeklyWeather from './components/WeeklyWeather/WeeklyWeather'\nimport DataContext from './context/DataContext'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport defaultBackground from './imgs/main-bg.jpg'\n\nconst App = () => {\n  const [city, setCity] = useState('')\n  const [data, setData] = useState({})\n  const [bg, setBg] = useState(defaultBackground)\n  const [weatherData, setWeatherData] = useState({})\n  const [isLoading, setIsLoading] = useState(true)\n  const [time, setTime] = useState('')\n  const findCity = () => {\n      axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=9782b49f3b88030442b9fe6cff72fe64&units=metric`)\n      .then(res => {\n          setData(res.data)\n          const time = calcTime(res.data.timezone)\n          setTime(time)\n          setBackground(res.data.main.temp,time)\n          const lat = res.data.coord.lat\n          const lon = res.data.coord.lon\n          axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&appid=9782b49f3b88030442b9fe6cff72fe64&units=metric`)\n            .then(res => {\n              setWeatherData(res.data)\n              setIsLoading(false)\n            })\n            .catch(error => console.log(error))\n      })\n      .catch(err => console.log(err))\n  }\n\n  const setBackground = (temperature, time) => {\n    const temp = Math.round(temperature)\n    if(temp >= 32 && (time <= 17 && time >=5)){\n      setBg(hot)\n    }else if((temp >= 20 && temp <=31) && (time <= 17 && time >=5)){\n      setBg(sunny)\n    }\n    else if((temp >= 11 && temp <=19) && (time <= 17 && time >=5)){\n      setBg(cloudy)\n    }\n    else if(temp <= 10 && (time <= 17 && time >=5)){\n      setBg(cold)\n    }\n    else if(temp >= 32 && (time >= 18 || time <=4)){\n      setBg(hotNight)\n    }\n    else if((temp >= 20 && temp <=31) && (time >= 18 || time <=4)){\n      setBg(clearNight)\n    }\n    else if((temp >= 11 && temp <=19) && (time >= 18 || time <=4)){\n      setBg(cloudyNight)\n    }\n    else if(temp <= 10 && (time >= 18 || time <=4)){\n      setBg(coldNight)\n    }\n  }\n\n  const calcTime = (offset) =>{\n    var d = new Date();\n    var utc = d.getTime() + (d.getTimezoneOffset() * 60000);\n    const offsetResult = (offset / 60)/60\n    var nd = new Date(utc + (3600000*offsetResult));\n\n    return nd.getHours();\n  }\n\n  return (\n    <div className=\"App\" style={{backgroundImage: `url(${bg}`}}>\n      <div className=\"main-container\">\n        <h1 className=\"brand\">Weather Forecast</h1>\n        <div className=\"action-group\">\n          <input className=\"search-bar\" placeholder=\"Search City\" value={city}\n              onChange={e => setCity(e.target.value)} \n              onKeyDown={e=> e.key === 'Enter' ?  findCity() : null}/>\n          <button className=\"search-btn\" onClick={findCity}>Search</button>\n        </div>\n      </div>\n      {data.main !== undefined?\n      <div className=\"data-container\">\n            <div className=\"cards\">\n              <DataContext.Provider value={{weatherData, setWeatherData}}>\n              {isLoading?\n                <CircularProgress />\n                :\n                <>\n                <CurrentWeather  data={data}/>\n                <WeeklyWeather time={time}/>\n                </>\n\n              } \n              </DataContext.Provider>\n            </div>\n        </div>\n        :\n        <>\n        </>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\components\\CurrentWeather\\CurrentWeather.js",["30","31","32","33","34","35"],"import {Card, CardContent, CardHeader, Divider} from '@material-ui/core'\r\nimport React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport './CurrentWeather.css'\r\n\r\n\r\nconst CurrentWeather = (props) => {\r\n    const date = moment().format('LLLL')\r\n    const timezone = props.data.timezone\r\n    const weather = props.data.weather[0].main\r\n    const icon = props.data.weather[0].icon\r\n\r\n    const  calcDate = (offset) =>{\r\n        var d = new Date();\r\n        var utc = d.getTime() + (d.getTimezoneOffset() * 60000);\r\n        const offsetResult = (offset / 60)/60\r\n        var nd = new Date(utc + (3600000*offsetResult));\r\n        const datetime = moment((nd)).format(\"dddd, MMM  D YYYY h:mm a\")\r\n        return datetime\r\n      }\r\n    \r\n    return(\r\n        <Card className=\"card-container\">\r\n            <CardHeader title={props.data.name} subheader={calcDate(props.data.timezone)}/>\r\n            <CardContent className=\"sub-card-container\">\r\n                <h3 className='description'>Today your experiencing {props.data.weather[0].description}</h3>\r\n                <Divider className=\"divider\"/>\r\n                <div className=\"weather-day-info\">\r\n                    <div className=\"weather-data\">\r\n                        <div>Temperature: {Math.round(props.data.main.temp)}°C</div>\r\n                        <div>Feels like: {Math.round(props.data.main.feels_like)}°C</div>\r\n                        <div>Humidity: {Math.round(props.data.main.humidity)}%</div>\r\n                        <div>Wind Speed: {Math.round(props.data.wind.speed)} km/h</div>\r\n                    </div>\r\n                    <img className=\"icon\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/>\r\n                </div>\r\n                    \r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\nexport default CurrentWeather",["36","37"],"C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\components\\WeeklyWeather\\WeeklyWeather.js",["38","39","40","41","42","43","44"],"import React,{useState, useContext} from 'react'\r\nimport {Card,Divider, Button, Menu, MenuItem,Fade,IconButton} from '@material-ui/core'\r\nimport {Link, Switch,Route, useHistory} from 'react-router-dom'\r\nimport './WeeklyWeather.css'\r\nimport {Line} from 'react-chartjs-2'\r\nimport DataContext from '../../context/DataContext'\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport Carousel,{consts} from 'react-elastic-carousel'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\n\r\n\r\n\r\nconst WeeklyWeather = (props) => {\r\n    const hourly_temperature = []\r\n    const hourly_weather = []\r\n    const daily_weather = []\r\n    const hourly_humidity = []\r\n    const {weatherData} = useContext(DataContext)\r\n    const raw_hourly_data = weatherData.hourly\r\n    const hourly_data_temp = raw_hourly_data.forEach(data => hourly_temperature.push(data.temp))\r\n    const hourly_data_humid = raw_hourly_data.forEach(data => hourly_humidity.push(data.humidity))\r\n    const hourly_data_weather = raw_hourly_data.forEach(data => hourly_weather.push(data.weather[0]))\r\n    const daily_data_weather = weatherData.daily.forEach(data => daily_weather.push(data.weather[0]))\r\n    const [menuname, setMenuname] = useState('Hourly Weather')\r\n    const days = [\"Sunday\",\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"]\r\n    const getTime = () => {\r\n        const orderedTime = []\r\n        const dict = {  1:'1 am', 2:'2 am', 3:'3 am',4:'4 am',5:'5 am',6:'6 am',7:'7 am',8:'8 am',9:'9 am',10:'10 am',\r\n        11:'11 am',12:'12 pm',13:' 1pm', 14:'2 pm', 15:'3 pm',16:'4 pm',17:'5 pm',18:'6 pm',19:'7 pm',20:'8 pm',21:'9 pm',22:'10 pm',\r\n        23:'11 pm',0:'12 am'}\r\n        for(let time = props.time; time<24; time++){\r\n            orderedTime.push(dict[time])\r\n        } // get initial time upto 11pm\r\n        for(let addedTime = 0; addedTime < props.time; addedTime++){\r\n            orderedTime.push(dict[addedTime])\r\n        }// add time from 12am to initial time\r\n        return orderedTime\r\n        \r\n    }\r\n\r\n    const temp_line_data = {\r\n        labels: getTime(),\r\n        datasets: [\r\n            {\r\n            label: 'Temparature',\r\n            fill: true,\r\n            lineTension: 0.5,\r\n            backgroundColor: 'rgba(75,192,192,1)',\r\n            borderColor: 'rgba(0,0,0,1)',\r\n            borderWidth: 2,\r\n            data: hourly_temperature\r\n            }\r\n        ]\r\n        }\r\n    \r\n    \r\n    \r\n    const humid_line_data = {\r\n        labels: getTime(),\r\n        datasets: [\r\n            {\r\n            label: 'Humidity',\r\n            fill: true,\r\n            lineTension: 0.5,\r\n            backgroundColor: 'orange',\r\n            borderColor: 'rgba(0,0,0,1)',\r\n            borderWidth: 2,\r\n            data: hourly_humidity\r\n            }\r\n        ]\r\n    }\r\n    \r\n\r\n    const  breakPoints = [\r\n        { width: 1, itemsToShow: 1, itemsToScroll: 1, pagination: false },\r\n        { width: 200, itemsToShow: 1, itemsToScroll: 1, pagination: false},\r\n        { width: 400, itemsToShow: 4, itemsToScroll: 3,},\r\n      ]\r\n\r\n\r\n    const myArrow = ({ type, onClick, isEdge }) =>{\r\n        const pointer = type === consts.PREV ? <ArrowBackIosIcon/> : <ArrowForwardIosIcon/>\r\n        return (\r\n          <IconButton className='arrowBtns' onClick={onClick} disabled={isEdge}>\r\n            {pointer}\r\n          </IconButton>\r\n        )\r\n      }\r\n    \r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const history = useHistory()\r\n    const temperature = () => {\r\n        history.push('/temperature')\r\n        setMenuname('Temperature')\r\n        setAnchorEl(null);\r\n    }\r\n    const humidity = () => {\r\n        history.push('/humidity')\r\n        setMenuname('Humidity')\r\n        setAnchorEl(null);\r\n    }\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const hourlyWeather = () =>{\r\n        history.push('/')\r\n        setMenuname('Hourly Weather')\r\n        setAnchorEl(null);\r\n    }\r\n    const dailyWeather = () =>{\r\n        history.push('/daily')\r\n        setMenuname('Daily Weather')\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    const time = getTime() // FOR THE HOURLY AND DAILY WEATHER CARDS\r\n    let index = 0 // index of time, very bad code\r\n    let currentDay = new Date().getDay()\r\n    return(\r\n        <Card className=\"weekly-card-container\">\r\n            <Button endIcon={<ArrowDropDownIcon />} aria-controls=\"fade-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n                {menuname}\r\n            </Button>\r\n            <Menu\r\n                id=\"fade-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={open}\r\n                onClose={handleClose}\r\n                TransitionComponent={Fade}\r\n            >\r\n                <MenuItem onClick={hourlyWeather}>Hourly Weather</MenuItem>\r\n                <MenuItem onClick={dailyWeather}>Daily Weather</MenuItem>\r\n                <MenuItem onClick={temperature}>Temperature</MenuItem>\r\n                <MenuItem onClick={humidity}>Humidity</MenuItem>\r\n            </Menu>\r\n\r\n\r\n\r\n\r\n            <Divider className=\"divider\"/>\r\n            <Switch>\r\n                <Route path=\"/temperature\">\r\n                        <Line\r\n                        className=\"line-graph\"\r\n                        data={temp_line_data}\r\n                        options={{\r\n                            title:{\r\n                            display:true,\r\n                            text:'Temperature',\r\n                            fontSize:15\r\n                            },\r\n                            legend:{\r\n                            display:true,\r\n                            position:'bottom'\r\n                            }\r\n                        }}\r\n                        />\r\n                </Route>\r\n                <Route path=\"/humidity\">\r\n                    <Line\r\n                    className=\"line-graph\"\r\n                        data={humid_line_data}\r\n                        options={{\r\n                            title:{\r\n                            display:true,\r\n                            text:'Humidity',\r\n                            fontSize:15\r\n                            },\r\n                            legend:{\r\n                            display:true,\r\n                            position:'bottom'\r\n                            }\r\n                        }}/>\r\n                </Route>\r\n                <Route exact path=\"/\">\r\n                    <div className=\"weekly-card-items\">\r\n                    <Carousel breakPoints={breakPoints} renderArrow={myArrow}>\r\n                    {hourly_weather.slice(0,24).map(hour =>{\r\n                        index++\r\n                        return <Card className=\"hourly-weather-card\">\r\n                                <div><strong>{time[index-1]}</strong></div>\r\n                                <img src={`http://openweathermap.org/img/wn/${hour.icon}@2x.png`}\r\n                                        className=\"hourly-weather-img\"\r\n                                />\r\n                                <div><strong>{hour.main}</strong></div>\r\n                                <div>{hour.description}</div>\r\n                                <div>{hour.temp}</div>\r\n                                \r\n                            </Card>\r\n                            \r\n                        \r\n                    })}\r\n                    </Carousel>\r\n                    </div>\r\n                </Route>\r\n                <Route path=\"/daily\">\r\n                <div className=\"daily-card-items\">\r\n                    <Carousel breakPoints={breakPoints} renderArrow={myArrow}>\r\n                        {daily_weather.slice(0,7).map(day =>{\r\n                            currentDay++\r\n                            return <Card className=\"daily-weather-card\">\r\n                                    <div><strong>{days[currentDay-1]}</strong></div>\r\n                                    <img src={`http://openweathermap.org/img/wn/${day.icon}@2x.png`}\r\n                                            className=\"hourly-weather-img\"\r\n                                    />\r\n                                    <div><strong>{day.main}</strong></div>\r\n                                    <div>{day.description}</div>\r\n                                    <div>{day.temp}</div>\r\n                                </Card>\r\n                            \r\n                        })}\r\n                        </Carousel>\r\n                    </div>\r\n                </Route>\r\n            </Switch>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\nexport default WeeklyWeather","C:\\Users\\Jayson Balano\\Documents\\React\\weatherapp\\client\\src\\context\\DataContext.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":3,"column":19,"nodeType":"51","messageId":"52","endLine":3,"endColumn":29},{"ruleId":"49","severity":1,"message":"53","line":2,"column":17,"nodeType":"51","messageId":"52","endLine":2,"endColumn":25},{"ruleId":"49","severity":1,"message":"54","line":2,"column":27,"nodeType":"51","messageId":"52","endLine":2,"endColumn":36},{"ruleId":"49","severity":1,"message":"55","line":8,"column":11,"nodeType":"51","messageId":"52","endLine":8,"endColumn":15},{"ruleId":"49","severity":1,"message":"56","line":9,"column":11,"nodeType":"51","messageId":"52","endLine":9,"endColumn":19},{"ruleId":"49","severity":1,"message":"57","line":10,"column":11,"nodeType":"51","messageId":"52","endLine":10,"endColumn":18},{"ruleId":"58","severity":1,"message":"59","line":35,"column":21,"nodeType":"60","endLine":35,"endColumn":100},{"ruleId":"45","replacedBy":"61"},{"ruleId":"47","replacedBy":"62"},{"ruleId":"49","severity":1,"message":"63","line":3,"column":9,"nodeType":"51","messageId":"52","endLine":3,"endColumn":13},{"ruleId":"49","severity":1,"message":"64","line":21,"column":11,"nodeType":"51","messageId":"52","endLine":21,"endColumn":27},{"ruleId":"49","severity":1,"message":"65","line":22,"column":11,"nodeType":"51","messageId":"52","endLine":22,"endColumn":28},{"ruleId":"49","severity":1,"message":"66","line":23,"column":11,"nodeType":"51","messageId":"52","endLine":23,"endColumn":30},{"ruleId":"49","severity":1,"message":"67","line":24,"column":11,"nodeType":"51","messageId":"52","endLine":24,"endColumn":29},{"ruleId":"58","severity":1,"message":"59","line":189,"column":33,"nodeType":"60","endLine":191,"endColumn":35},{"ruleId":"58","severity":1,"message":"59","line":210,"column":37,"nodeType":"60","endLine":212,"endColumn":39},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'date' is assigned a value but never used.","'timezone' is assigned a value but never used.","'weather' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["68"],["69"],"'Link' is defined but never used.","'hourly_data_temp' is assigned a value but never used.","'hourly_data_humid' is assigned a value but never used.","'hourly_data_weather' is assigned a value but never used.","'daily_data_weather' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]